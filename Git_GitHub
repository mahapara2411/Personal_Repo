Git is a distributed version control system.

Stages of Git:
 - Working space
 - Staging Area
 - Local Repo
 - Central repo

GIT COMMANDS:

 git config --global user.name "<username"> -> To configure username and email
 git config --global user.email "<email id">
 git config --list -> To display the configured details
 git init -> Initialize an empty dir as a git repo

 git clone <repo_url> -> To retrieve entire repository present in github
 git add . -> add to the current directory
 git add <filename>
 git commit -m <"message"> -> commit changes to local repo / git commit -am <"message"> -> To add and commit at the same time
 git push -> to push the code to the remote repo
 git pull -> pull the git changes from remote repo
 git status -> show all untracked files
 git diff ->To see the modifications made 

 git log / git log --oneline -> To see the git logs
 git show <commit_id>
 git show <commit_id>:<filename> -> when modification is done in multiple files together,system generates same commit id

 git branch -> To see branch details
 git branch <branch_name> / git checkout -b <branch_name> -> To create new branch
 git checkout <branch_name> -> to go to particular branch

---------How to set passwordless authentication in github--------
Go to Setting->Developer Setting->Personal access Tokens->Select Tokens(classic)->Generate New Token->Select Generate new token(classic)->Provide anything in the Note,expiration and selsct all the scopes->click on generate token
Copy the token and paste it in the below command:
- git remote set-url origin https://<token>@github.com/username/reponame
 
-----To merge the branches to the Main branch:-----
 git merge -> Merge preserves history of the repository, creating only one new merge commit. It is non-destructive and do not change the existing branch in any way.
   e.g. git checkout feature
 git merge main
-----(or) git merge feature main

git cherry-pick -> Cherry-picking in Git means choosing a commit from one branch and applying it to another.
  e.g. git cherry-pick <commit-hash>

git rebase -> Rebase rewrites history , reapplying commits on top of another base branch. 
 -> This moves the entire feature branch to begin on the tip of the main branch, effectively incorporating all of the new commits in main
 -> First, it eliminates the unnecessary merge commits required by git merge. 
 -> Second,rebasing also results in a perfectly linear project historyâ€”you can follow the tip of feature all the way to the beginning of the project without any forks.
    e.g. git checkout feature
    git rebase main

how to resolve merge conflict?
Ans : By deleting the conflict markers >>>>>>, --------, <<<<<<<<<<<<<






                                                                                                                                
