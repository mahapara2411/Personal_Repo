Ref: https://medium.com/@sonalijain0605/docker-components-41e847893d8a

- It's a software platform that allows to build, test, and deploy applications quickly
- An operating system for containers
- Containerize any application
- Detached mode in docker means a Docker container runs in the background of your terminal. 
- It does not receive input or display output. 
- Using detached mode also allows you to close the opened terminal session without stopping the container

- Docker Architecture:
  - Docker Deamon: 
    - The daemon (dockerd) is a process which runs in the background and waits for Client's command.
    - It is capable of managing various docker objects.
  - Docker Client:
    - The client (docker) is a CLI program responsible for transporting commands issued by users.
  - Rest API:
    - Bridge between the daemon and the client. 
    - Any command issued using the client passes through the API to finally reach the daemon.

- Docker Image:
  - Template for creating an env of choice
  - Snapshot
  - Has everything need to run an app
  - OS, App Code, software

- Docker Registeries/ Amazon ECR (Elastic container Registery)/ Docker Hub:
  - Highly scalable server side appln that stores and distributes the docker images
  - Used in CI/CD pipeline
  - Runs the application

- Containers:
  - Running Instance of an Image

- Difference between Container vs VM(Virtual machine)
  - Containers:
    - Containers are an abstraction at the app layer that packages code & dependecies together. 
    - Multiple containers can run on the same machine & share the OS Kernel with other container. 
  - VM:
    - It is an abstraction of physical server turning one server into multiple servers.
    - Each VM includes full copy of an OS system / Dedicated OS, necessary binaries & libraries- taking up ten's of GB's
    - Slow to boot. 

- Docker volumes:
  - Allow sharing of data (files,folders)
  - Folder in physical host file system is mounted into the virtual file system of docker.
  - Between host and container
    - <Folder> pwd
    - <Folder> docker run --name <container_name> -v $(pwd):/usr/share/nginx/html:ro -d -p 8080:80 nginx:latest
    - <Folder> docker exec -it <container_name> bash -> Inside the container
    - ls -la
  - Between containers
- 3 Types of Docker volumes:
  - Host Volume: we need to decide which folder in the host file system needs to be mounted to the container.
  - Anonymous Volume: For each container a folder gets generated that is mounted
    - E.x. docker run -v var/lib/mysql/data
  - Named Volume: we can reference the volume by name
    - should be used in production
    - E.x. docker run -v name:/var/lib/mysql/data

- Docker Commands:
  - docker --version
  - docker ps -> To check the running containers
  - docker ps -a -> containers that are currently running or have run in the past
  - docker pull <nginx>
  - docker images -> Lists down the available Images
  - docker rmi <image_name> -> To remove Image
  - docker rmi <a2a15febcdf3> <4bb46517cac3> -> To remove multiple images
  - docker rmi $(docker images -q) -> To remove all docker images
  - docker run nginx:latest -> To run containers
  - docker run -d nginx:latest -> To run containers in detached mode
  - docker container ls -> To list the running containers
  - docker stop <Container_id/ Container_name> -> To stop the running container
  - docker start <Container_id/ Container_name>
  - docker rm <Container_id/ Container_name> / docker rm  -f <Container_id/ Container_name> -> To remove the container / To remove the container forcefully
  - docker ps -aq -> To retrieve every single container id
  - docker rm $(docker ps -aq) -> To remove every single container
  - docker run --name <website> -d -p 8080:80 -p 3000:80 nginx:latest -> To name the container as "website"
  - docker inspect <container_name/container_id> -> To inspect the containers in detail like IP, volume, network, env path etc (low level informations)
  - docker logs -f <container_name> -> To view the logs of the container. 
  - docker exce -it <Container_id> /bin/sh -> To get inside container

- To Expose Ports (single/multiple):
  - docker run -d -p 8080:80 nginx:latest -> To expose external port, Map local host 8080 to port 80 inside of the container
  - docker run -d -p 8080:80 -p 3000:80 nginx:latest -> To expose multiple ports

- Docker Compose:
  - It is a tool for running multi-container applications on Docker defined using the Compose file format. 
  - A Compose file is used to define how one or more containers that make up your application are configured.
  - Once we have a Compose file, we can create and start the application with a single command.
  - E.x. docker compose up
  - docker compose down

 -Using Docker Compose is a three-step process:
  - Define your app's environment with a Dockerfile so it can be reproduced anywhere.
  - Define the services that make up your app in compose.yaml so they can be run together in an isolated environment.
  - Lastly, run docker compose up and Compose will start and run your entire app.

E.x. services:
       web:
         build: .
         ports:
           - "5000:5000"
         volumes:
           - .:/code
      redis:
         image: redis

- Docker Cache and Layers:
  - When building an image from scratch, Docker creates layers to make the successive deployments and builds efficient. 
  - Each layer is a diff/delta from the previous layer that was built before it.
  - Each line in this Dockerfile is a Docker layer and if not changed will be reused from the cached layers in later builds.
  - Both adding and removing files will result in a new layer
  - E.x. 
    FROM node:12-alpine
    RUN apk add --no-cache python2 g++ make
    WORKDIR /app
    COPY . .
    RUN yarn install --production
    CMD ["node", "src/index.js"]
    EXPOSE 3000

- Advantages of using Docker Layers
  - Good storage management
  - Faster builds
  - Faster deployments
  - Sharing across multiple containers
  - Enhanced scalability

- DockerFile:
  - Dockerfile is a simple text file that consists of instructions to build Docker images.
  - FROM -> To pull the base image
    RUN -> To execute Commands
    CMD -> To Provide defaults for an executing container
    ENTRYPOINT -> To configure a container that will run as an executable
    WORKDIR -> To set the working directory
    COPY -> To copy a directory from a local machine to the docker container
    ADD -> To copy files and folders from a local machine to the docker container (or) to get the package from the internet (wget command)
    EXPOSE -> Informs docker that container listens on the specified network port at runtime
    ENV -> To set env variable
  - E.x. 
    - Install Tomcat on Centos:
      - Pull centos from Dockerhub                - FROM
      - Install Java                              - RUN
      - Create /opt/tomcat directory              - RUN
      - Change working directory to /opt/tomcat   - WORKDIR
      - Download Tomcat Package                   - ADD/ RUN      
      - Extract tar.gz file                       - RUN
      - Rename to Tomcat directory                - RUN
      - Tell to docker that it runs on Port 8080  - EXPOSE
      - Start Tomcat service                      - CMD
 - FROM centos:latest
 - RUN yum install java -y
 - RUN mkdir /opt/tomcat
 - WORKDIR /opt/tomcat
 - ADD <Tomcat package download url>
 - RUN tar -xvzf apache-tomcat-9.0.54.tar.gz
 - RUN mv apache-tomcat-9.0.54/* /opt/tomcat
 - EXPOSE 8080
 - CMD ["/opt/tomcat/bin/catalina.sh"]

- Docker Network:
  - 
