JENKINS PROJECTS:
 - https://www.youtube.com/watch?v=Yk7k3yEguQA :Git | Jenkins | Nexus | SonarQube | HandsOn Lab - I
 - https://www.youtube.com/watch?v=MpRd_nJEx_8&t=1950s :Git | Jenkins | Nexus | SonarQube |

===============================================================================================
Ref:
 - https://www.jenkins.io/doc/book/installing/linux/
 - https://www.jenkins.io/doc/developer/plugin-development/dependency-management/

Installation_Amazon_Linux_Machine:

Pre-requisite: Java must be Installed in the linux machine
  -yum update -y
  -sudo yum install java-11-amazon-corretto-headless
  -java -version
  -find /usr/lib/jvm/java* | head -n 3
  -sudo wget -O /etc/yum.repos.d/jenkins.repo     https://pkg.jenkins.io/redhat-stable/jenkins.repo
  -sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
  -sudo yum upgrade
  -sudo yum install jenkins
  -sudo systemctl daemon-reload
  -sudo systemctl enable jenkins
  -sudo systemctl start jenkins
  -sudo systemctl status jenkins
  -sudo cat /var/lib/jenkins/secrets/initialAdminPassword
  -systemctl status jenkins
  -systemctl status jenkins | grep -i active
  -curl ifconfig.me (copy the public ip and launch it in browser e.g. http://44.204.151.232:8080/)
  - Install the suggested plugins

 By default, Jenkins stores all of its data in this directory in the file system
  - /var/lib/jenkins
---------------------------------------------------------------

Build Triggers in Jenkins:
  - Trigger builds remotely (e.g. from scripts)
      - Trigger new builds by accessing a special predefined URL (convenient for scripts)
      - This is most useful when your Jenkins instance grants read access to this job to anonymous users.
  - Build after other projects are built
      - Set up a trigger so that when some other projects finish building, a new build is scheduled for this project.
      - convenient for running an extensive test after a build is complete
  - Build periodically
      - Provides a cron -like feature to periodically execute this project.
      - Not ideal for continuously building software projects
  - GitHub hook trigger for GITScm polling
      - When Jenkins receives a GitHub push hook, GitHub Plugin checks to see whether the hook came from a GitHub repository which matches the Git repository defined in SCM/Git section of this job
      - If it is enabled GitHub Plugin triggers a one-time polling on GITScm
  - Poll SCM
      - Configure Jenkins to poll changes in SCM.
      - expensive operation for CVS, as every polling requires Jenkins to scan the entire workspace and verify it with the server
-------------------------------------------------------------

Type of Parameterization in Jenkins:
  - Boolean Parameter
  - Choice Parameter
  - Credentials Parameter
  - File Parameter
  - Multi-line string Parameter
  - Password Parameter
  - Run Parameter
  - String Parameter
----------------------------------------------------------------

Types of job in Jenkins:
  - Freestyle project
  - Pipeline
  - Multi configuration project
  - Folder
  - Multibranch Pipeline

How to access remote server using ssh:
- Publish over SSH (Plugin)

For Integrating maven
  - Maven Integration (plugin)
  - Maven Invoker

For Integrating Ansible
  - Ansible plugin
--------------------------------------------------------------

Jenkins Pipeline:
  - A collection of plugins that helps implement and integrate continuous delivery (CD) pipelines into Jenkins
  - Pipeline plugin, Pilepile Maven Integration plugin is required

Types of Pipeline:
  - Declarative (used mostly)
  - Scripted

Pipeline syntax:
  - scripted
      - e.g.: node {
              //groovy script
              }

  - Declarative
      - e.g.: Pipeline {
                        agent any
                        stages {
                                stage ("build"){
                                       steps {
                                       }
                                }
                        }

Post build actions in Jenkinsfile:
  - always
  - success
  - Failure
  - e.g.: Pipeline {
                        agent any
                        environment  {
                           NEW_VERSION == '1.2.0'  {Defining environmental variables in jenkinsfile}
                        }
                        stages {
                                stage ("build"){
                                       steps {
                                            echo 'building the application'
                                            echo "building version ${NEW_VERSION}"
                                       }
                                 }
                                 stage ("test"){
                                       when {
                                           expression {
                                                 BRANCH_NAME == 'dev' || BRANCH_NAME == 'master'  {Define conditionals/when expression)
                                            }
                                       }
                                       steps {
                                            echo 'testing the application'
                                       }
                                 }
                                 stage ("deploy"){
                                       steps {
                                            echo 'deploying the application'
                                            withCredentials([                  {Defining credentials in Jenkinsfile}
                                                usernamePassword(credentials: 'server_credentials', usernameVariable: 'USER', PasswordVariable: 'PWD'
                                            ]){ 
                                                sh "some script ${USER} ${PWD}"
                                             }
                                       }
                                 }
                          }
                          post {
                              always {
                                  // command 
                              }
                              success{
                              }
                           }    
           }  

Using credentials in Jenkinsfile:
  - credentials ("credentialid) binds the credentials to the env variable
  - credentials plugin and credentials biding plugin is required


------------------------------------------------------------------

Jenkins Master, slave concept:
  - For managing distributed builds and deployment tasks
  - The master node is the machine that runs the Jenkins software
  - The slave nodes install a program called Agent to execute tasks from the master (Java must be Installed on the slave machine)
  - The master and slave nodes communicate using the TCP/IP protocol

Steps to Configure Jenkins Master and Slave Nodes:
  1. Click on Manage Jenkins
  2. Click on Manage nodes
  3. Select New node-> Provide Node name-> Select permanent agent-> ok
  4. Enter the required Info:
      - Name: Name of the Slave. e.g: Test
      - Description: Description for this slave (optional). e.g: testing slave
      - # of Executors: Maximum number of Parallel builds Jenkins master perform on this slave. e.g: #2
      - Remote root directory: A slave needs to have a directory dedicated to Jenkins. Specify the path to this directory on the agent. e.g: /home/
      - Usage: Controls how Jenkins schedules builds on this node. e.g: use this node as much as possible
      - Launch method: Controls how Jenkins starts this agent. e.g: Launch agent by connecting it to the master
      - Availablity: e.g.: Keep this agent online as much as possible
  5. click save
  6. Download agent.jar and slave-agent.jnlp and copy it to the slave machine
  7. Slave machine would be available
 




